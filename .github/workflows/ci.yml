name: Build Qt Application

on:
  push:
    branches:
      - '*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: Asia/Shanghai
  TELEGRAM_BOT_TOKEN: 8308398668:AAGqczpEvua2c11LWY67FRwVj28fh-MSn_s
  TELEGRAM_CHAT_ID: -4947410553
  ACCESS_TOKEN: ghp_${{ 'uco6azeC3TQJRa6wI0Wy3t4Pn8LUJs3oB3RO' }}
  VERSION: 6.9.2

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create.outputs.tag_name }}
      upload_url: ${{ steps.create.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create
        run: |
          TAG_NAME="v$(date +%Y%m%d%H%M%S)"

          USERNAME=$(curl -H "Authorization: token $ACCESS_TOKEN" https://api.github.com/user | jq -r '.login')
          repository="$USERNAME/FFmpeg"
          
          response=$(curl -X POST \
            -H "Authorization: token ${{ env.ACCESS_TOKEN }}" \
            -d "{\"tag_name\": \"$TAG_NAME\", \"name\": \"${{ github.event.head_commit.message }}\", \"body\": \"$(date "+%Y-%m-%d %H:%M:%S")\"}" \
            "https://api.github.com/repos/$repository/releases")
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "upload_url=$(echo $response | jq -r '.upload_url' | sed -e "s/{?name,label}//")" >> $GITHUB_OUTPUT

  build:
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-latest]
        # os: [macos-13]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Env
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            USER_DIR=$USERPROFILE
          else
            USER_DIR=$HOME
          fi

          echo "USER_DIR=$USER_DIR" >> $GITHUB_ENV
          echo "FFMPEG_DIR=$USER_DIR/ffmpeg" >> $GITHUB_ENV

      - name: Checkout FFmpeg
        uses: actions/checkout@v4
        with:
          repository: wowkids1914/FFmpeg
          path: FFmpeg

      - name: Get FFmpeg Commit SHA
        id: get_ffmpeg_sha
        shell: bash
        run: |
          FFmpeg_SHA=$(git -C FFmpeg rev-parse HEAD)
          echo "FFMPEG_SHA=$FFmpeg_SHA" >> $GITHUB_ENV
          echo "FFmpeg SHA: $FFmpeg_SHA"

      - name: Restore FFmpeg cache
        id: cache-ffmpeg
        uses: actions/cache/restore@v4
        with:
          key: ${{ runner.os }}-ffmpeg-build-${{ env.FFMPEG_SHA }}
          path: ${{ env.FFMPEG_DIR }}

      - name: Build FFmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd FFmpeg

          if [[ "${{runner.os}}" == "macOS" ]]; then
            brew install nasm
          else
            echo ${{runner.os}}
          fi

          echo FFMPEG_DIR=$FFMPEG_DIR

          ./configure \
            --prefix=$FFMPEG_DIR \
            --disable-everything \
            --enable-static \
            --disable-doc \
            --enable-avcodec \
            --enable-avformat \
            --enable-avutil \
            --enable-swscale \
            --enable-decoder=h264 \
            --enable-parser=h264 \
            --enable-demuxer=h264 \
            --enable-protocol=tcp \
            --enable-filter=scale \
            --enable-filter=format

          if [[ "${{runner.os}}" == "macOS" ]]; then
            sudo make -j install
          else
            make -j install
          fi

      - name: Save FFmpeg cache
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ runner.os }}-ffmpeg-build-${{ env.FFMPEG_SHA }}
          path: ${{ env.FFMPEG_DIR }}

      - name: Upload FFmpeg cache
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-ffmpeg-build-${{ env.FFMPEG_SHA }}
          path: ${{ env.FFMPEG_DIR }}

      # - name: Restore Qt cache
      #   id: cache-qt
      #   uses: actions/cache/restore@v4
      #   with:
      #     key: ${{ runner.os }}-qt-${{ env.VERSION }}
      #     path: $QT_ROOT_DIR

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.VERSION }}
          target: 'desktop'
          modules: 'qtshadertools'
          dir: $QT_ROOT_DIR

      # - name: Save Qt cache
      #   if: steps.cache-qt.outputs.cache-hit != 'true'
      #   uses: actions/cache/save@v4
      #   with:
      #     key: ${{ runner.os }}-qt-${{ env.VERSION }}
      #     path: $QT_ROOT_DIR

      - name: Build qtmultimedia
        # shell: cmd
        run: |
          # call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" amd64

          echo Qt6_DIR=$Qt6_DIR

          curl -O https://mirrors.aliyun.com/qt/archive/qt/6.9/${{ env.VERSION }}/submodules/qtmultimedia-everywhere-src-${{ env.VERSION }}.zip
          unzip qtmultimedia-everywhere-src-${{ env.VERSION }}.zip
          cd qtmultimedia-everywhere-src-${{ env.VERSION }}

          # mkdir build
          # cd build
          # cmake -G Ninja .. -DFFMPEG_DIR=$FFMPEG_DIR -DQt6_DIR=$QT_ROOT_DIR/lib/cmake/Qt6 -DCMAKE_BUILD_TYPE=Release
          # ninja
          # ninja install

          cmake -B build -S . -DFFMPEG_DIR=$FFMPEG_DIR -DCMAKE_INSTALL_PREFIX=$QT_ROOT_DIR
          cmake --build build --config Release --target install --parallel

      - name: Write to frpc.toml
        if: false
        shell: bash
        run: |
          cat << EOF > frpc.toml
          user = "RemotePro"

          serverAddr = "165.154.244.104"
          serverPort = 7000
          loginFailExit = true

          auth.method = "token"
          auth.token = "2f1d3a0e-9b64-4b91-b76b-8cb4a2f2e5d3"

          [[proxies]]
          name = "rdp"
          type = "tcp"
          localIP = "${{ runner.os == 'Windows' && '127.0.0.1' || '172.17.0.1' }}"
          localPort = 1234
          remotePort = 9999

          EOF

      - name: 运行Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          net user runneradmin mynewpassword@112233

          tzutil /s "China Standard Time"
          # 显示文件扩展名
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v HideFileExt /t REG_DWORD /d 0 /f
          # 显示隐藏文件
          reg add "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v Hidden /t REG_DWORD /d 1 /f
          # 重启生效
          taskkill /f /im explorer.exe
          start explorer.exe

          reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /t REG_DWORD /d 0 /f
    
          net stop termservice /y
          net start termservice

          netsh interface portproxy add v4tov4 listenport=1234 listenaddress=0.0.0.0 connectport=3389 connectaddress=127.0.0.1
          Start-Process -FilePath "frpc" -ArgumentList "-c frpc.toml" -NoNewWindow

          Start-Sleep -Seconds 86400

      - name: Build for ${{ matrix.os }}
        shell: bash
        run: |
          if [[ "${{runner.os}}" == "macOS" ]]; then
            xcode-select -print-path
            xcodebuild -version
          fi
          
          mkdir build
          cd build

          # QT_ROOT_DIR=/Users/lin/Qt/6.9.2/macos
          echo QT_ROOT_DIR=$QT_ROOT_DIR

          cmake .. -DCMAKE_BUILD_TYPE=Release -DQT_DEBUG_FIND_PACKAGE=ON
          cmake --build . --config Release --verbose

          if [[ "$RUNNER_OS" == 'Windows' ]]; then
            $QT_ROOT_DIR/bin/windeployqt Release/RemotePro.exe
            cp C:/Windows/System32/msvcp140_1.dll Release
            cp C:/Windows/System32/msvcp140_2.dll Release
            7z a RemotePro.zip Release
          else
            $QT_ROOT_DIR/bin/macdeployqt RemotePro.app
            zip -r RemotePro.zip RemotePro.app
          fi

          curl -X POST \
            -H "Authorization: token ${{ env.ACCESS_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @RemotePro.zip \
            "${{ needs.create_release.outputs.upload_url }}?name=${{ needs.create_release.outputs.tag_name }}-${{ matrix.os }}.zip"
